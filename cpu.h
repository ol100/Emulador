#pragma once

struct instruction {
	int valid_instruction;
	int clock_cycle;
	int machine_cycle;
	void (*action)(void);
	
	//unsigned char ticks;

} extern const instructions[256];

void reconstruirHL();
void deconstruirHL();
void reconstruirDE();
void deconstruirDE();
void reconstruirBC();
void deconstruirBC();
static void zero();
static void SUBSTRACT();
static void half();
static void acarreo();


void nada();
//void inc_b(void);


static void ando(unsigned char *A);
static void oro(unsigned char *A);
static void xoro(unsigned char *A);
static void cp(unsigned char A);
static void restaC(unsigned char *A, unsigned char B);
static void resta(unsigned char *A, unsigned char B);
static void sumaC(unsigned char *A, unsigned char B);
static void suma2(char16_t *A, char16_t B);
static void suma(unsigned char *A, unsigned char B);
static unsigned char dec2(unsigned char A);
static void dec(unsigned char *A);
static unsigned char inc2(unsigned char A);
static void inc(unsigned char *A);

void nop();
void ld_bc16(char16_t valor);
void ld_bca();
void inc_bc();
void inc_b(void);
void dec_b();
void ld_b8(unsigned char valor);
void rlca();
void LD_a16_sp(char16_t direccion);
void add_hl_bc();
void ld_a_bc();
void dec_bc();
void inc_c();
void dec_c();
void ld_c8(unsigned char valor);
void rrca();
void stop();
void ld_de16(char16_t valor);
void ld_dea();
void inc_de();
void inc_d();
void dec_d();
void ld_d8(unsigned char valor);
void rla();
void jr_r8(char valor);
void add_hl_de();
void ld_a_de();
void dec_de();
void inc_e();
void dec_e();
void ld_e8(unsigned char valor);
void rra();
void jr_nr8(char valor);
void ld_hl16(char16_t valor);
void ld_hla();
void inc_hl();
void inc_h();
void dec_h();
void ld_h8(unsigned char valor);
void DAA();
void jr_zr8(char valor);
void add_hl_hl();
void ld_a_hll();
void dec_hl();
void inc_l();
void dec_l();
void ld_l8(unsigned char valor);
void cpl();
void jr_ncr8(char valor);
void ld_sp16(char16_t valor);
void ld_hlma();
void inc_sp();
void inc_hlm();
void dec_hlm();
void ld_hlld8(unsigned char valor);
void scf();
void jr_cr8( char valor);
void add_hl_SP();
void ld_a_hlm();
void dec_sp();
void inc_a();
void dec_a();
void ld_a8(unsigned char valor);
void CCF();
void ld_b_b();
void ld_b_c();
void ld_b_d();
void ld_b_e();
void ld_b_h();
void ld_b_l();
void ld_b_hl();
void ld_b_a();
void ld_c_b();
void ld_c_c();
void ld_c_d();
void ld_c_e();
void ld_c_h();
void ld_c_l();
void ld_c_hl();
void ld_c_a();
void ld_d_b();
void ld_d_c();
void ld_d_d();
void ld_d_e();
void ld_d_h();
void ld_d_l();
void ld_d_hl();
void ld_d_a();
void ld_e_b();
void ld_e_c();
void ld_e_d();
void ld_e_e();
void ld_e_h();
void ld_e_l();
void ld_e_hl();
void ld_e_a();
void ld_h_b();
void ld_h_c();
void ld_h_d();
void ld_h_e();
void ld_h_h();
void ld_h_l();
void ld_h_hl();
void ld_h_a();
void ld_l_b();
void ld_l_c();
void ld_l_d();
void ld_l_e();
void ld_l_h();
void ld_l_l();
void ld_l_hl();
void ld_l_a();
void ld_hl_b();
void ld_hl_c();
void ld_hl_d();
void ld_hl_e();
void ld_hl_h();
void ld_hl_l();
void halt();
void ld_hl_a();
void ld_a_b();
void ld_a_c();
void ld_a_d();
void ld_a_e();
void ld_a_h();
void ld_a_l();
void ld_a_hl();
void ld_a_a();
void add_a_b();
void add_a_c();
void add_a_d();
void add_a_e();
void add_a_h();
void add_a_l();
void add_a_hl();
void add_a_a();
void adc_a_b(void);
void adc_a_c(void);
void adc_a_d(void);
void adc_a_e(void);
void adc_a_h(void);
void adc_a_l(void);
void adc_a_hl(void);
void adc_a_a(void);
void sub_a_b(void);
void sub_a_c(void);
void sub_a_d(void);
void sub_a_e(void);
void sub_a_h(void);
void sub_a_l(void);
void sub_a_hl(void);
void sub_a_a(void);
void sbc_a_b(void);
void sbc_a_c(void);
void sbc_a_d(void);
void sbc_a_e(void);
void sbc_a_h(void);
void sbc_a_l(void);
void sbc_a_hl(void);
void sbc_a_a(void);
void and_b(void);
void and_c(void);
void and_d(void);
void and_e(void);
void and_h(void);
void and_l(void);
void and_hlp(void);
void and_a(void);
void xor_b(void);
void xor_c(void);
void xor_d(void);
void xor_e(void);
void xor_h(void);
void xor_l(void);
void xor_hlp(void);
void xor_a(void);
void or_b(void);
void or_c(void);
void or_d(void);
void or_e(void);
void or_h(void);
void or_l(void);
void or_hlp(void);
void or_a(void);
void cp_b(void);
void cp_c(void);
void cp_d(void);
void cp_e(void);
void cp_h(void);
void cp_l(void);
void cp_hlp(void);
void cp_a(void);
void ret_nz();
void pop_bc();
void jp_nz_a16(unsigned short valor);
void jp_a16(unsigned short valor);
void call_nz_a16(unsigned short valor);
void push_bc();
void add_a_d8(unsigned char valor);
void rst_00h();
void ret_z();
void ret();
void jp_z_a16(unsigned short valor);
void call_z_a16(unsigned short valor);
void call_a16(unsigned short valor);
void adc_a_d8(unsigned char valor);
void RST_08H();
void ret_nc();
void pop_de();
void jp_nc_a16(unsigned short valor);
void call_nc_a16(unsigned short valor);
void push_de();
void sub_d8(unsigned char valor);
void rst_10h();
void ret_c();
void reti();
void jp_c_a16(unsigned short valor);
void call_c_a16(unsigned short valor);
void sbc_a_d8(unsigned char valor);
void rst_18h();
void ldh_a8_a(unsigned char valor);
void pop_hl();
void ld_ca();
void push_hl();
void and_d8(unsigned char valor);
void rst_20h();
void add_sp_r8(char valor);
void jp_hl();
void ld_a16_a(unsigned short valor);
void xor_d8(unsigned char valor);
void rst_28h();
void ldh_a_a8(unsigned char valor);
void pop_af();
void la_ac();
void di();
void push_af();
void or_d8(unsigned char valor);
void rst_30h();
void ld_hl_spr8(char valor);
void ld_sp_hl();
void ld_a_a16(unsigned short valor);
void ei();
void cp_d8(unsigned char valor);
void rst_38h();